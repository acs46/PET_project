help("tiplabels")
names(newbdTree)
plot(newbdTree, main="Phylogenetic Tree of beta-defensins",
edge.color='gold',
tip.color="blue")
z$tip.label
ss
??phytools
setwd("/Users/astuart/Ramapo/Genomics/R/Tree/BDefensins")
![](defensinTree.png)
system.file("tex", "texshade.sty", package="msa")
## install.packages("stringr")
library(stringr)
library(msa)  #Multiple Sequence Alignment
library(seqinr)
library(ape)  #Analysis of Phylogenetics and Evolution in R
setwd("~/Ramapo/Genomics/R/Tree/BDefensins")
browseVignettes("phytools")
BiocManager::available("phytools")
install.packages("phytools")
browseVignettes("phytools")
??phytools
## Original Sequences with default (long :) names
##FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs.txt", format="fasta")
## Sequences with FASTA titles edited to shorter format
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
setwd("~/Ramapo/Genomics/R/YourMSAalignment")
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
plot(foxTree, main="Phylogenetic Tree of FoxP1 Sequences")
?dotPlot
pdf(plot(foxTree, main="Phylogenetic Tree of FoxP1 Sequences"))
getwd()
plot(foxTree, main="Phylogenetic Tree of FoxP1 Sequences")
dev.off()
pdf("myplot.pdf")
plot(foxTree, main="Phylogenetic Tree of FoxP1 Sequences")
dev.off()
bdSeqs <- readAAStringSet("eDefensins.fa", format="fasta")
bdAlign <- msa(bdSeqs)
print(bdAlign, show="complete")
tree <- read.tree(text = "(((A,B),(C,D)),E);")
plot(tree, type = "cladogram", edge.width = 2)
tree$tip.label
hemoSeq[5]
?hemoSeq
str(hemoSeq)
getwd()
View(bdAlign)
View(bdAln2)
2+2
setwd("~/Ramapo/Genomics/R/YourMSAalignment")
getwd()
help("msa-package")
browseVignettes("msa")
library(msa)
system.file("tex", "texshade.sty", package="msa")
## Original Sequences with default (long :) names
##FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs.txt", format="fasta")
## Sequences with FASTA titles edited to shorter format
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
FoxP1Seqs
foxAlign <- msa(FoxP1Seqs) ## ClustalW is the default
foxAlignMuscle <- msa(FoxP1Seqs, "Muscle")
foxAlignClustalOmega <- msa(FoxP1Seqs, "ClustalOmega")
msaPrettyPrint(foxAlign, y=c(495, 600), output="pdf",
showNames="left", showLogo="top", askForOverwrite=FALSE)
msaPrettyPrint(foxAlign, y=c(495, 600), output="pdf",
showNames="left", showLogo="top", askForOverwrite=FALSE)
setwd("~/Ramapo/Genomics/R/Tree/BDefensins")
setwd("~/Ramapo/Genomics/R/Tree/BDefensins")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(msa)  #Multiple Sequence Alignment
library(seqinr)
library(ape)  #Analysis of Phylogenetics and Evolution in R
system.file("tex", "texshade.sty", package="msa")
bdSeqs <- readAAStringSet("eDefensins.fa", format="fasta")
bdAlign <- msa(bdSeqs)
bdAlignClustalWAlign <- msa(bdSeqs, "ClustalW")
bdAlignClustalOmegaAlign <- msa(bdSeqs, "ClustalOmega")
print(bdAlign, show="complete")
#Phyogenetic Tree
tree <- rtree(n = 20)
plot(tree, edge.width = 2)
plot(tree, edge.width = 5)
#Phyogenetic Tree
tree <- rtree(n = 20)
plot(tree, direction=u, edge.width = 2)
#Phyogenetic Tree
tree <- rtree(n = 20)
plot(tree, direction=upwards, edge.width = 2)
#Phyogenetic Tree
tree <- rtree(n = 20)
plot(tree, direction="upwards", edge.width = 2)
plot(tree, edge.width = 5)
#Phyogenetic Tree
tree <- rtree(n = 20)
plot(tree, direction="downwards", edge.width = 2)
plot(tree, edge.width = 5)
tree <- read.tree(text = "(((A,B),(C,D)),E);")
plot(tree, type = "cladogram", edge.width = 2)
tree$tip.label
bdAln2 <- msaConvert(bdAlign, type="seqinr::alignment")
d <- dist.alignment(bdAln2, "identity")
as.matrix(d)[2:6, "Human BAC56888.1 b-defensin1 [Homo sapiens]", drop=FALSE]
bdTree <- nj(d)  #Neighbor Join
plot(bdTree, main="Phylogenetic Tree of beta-defensins")
plot(bdTree, cex="0.5", main="Phylogenetic Tree of beta-defensins")
plot(bdTree, cex=0.5, main="Phylogenetic Tree of beta-defensins")
newbdTree <- bdTree
newtips <- word(bdTree$tip.label, 1)
newbdTree$tip.label <- newtips
plot(newbdTree, main="Phylogenetic Tree of beta-defensins")
newbdTree <- bdTree
newtips <- word(bdTree$tip.label, 1) #users stringr to pull 1st word in title
newbdTree$tip.label <- newtips
plot(newbdTree, main="Phylogenetic Tree of beta-defensins")
nodelabels("Clade A", 22, frame="c", bg="white")
plot(bdTree, cex=0.5, main="Phylogenetic Tree of beta-defensins")
nodelabels("Clade A", 22, frame="c", bg="white")
??plot
bdTree$node.label
nodelabels()
nodelabels("A",10)
nodelabels("A","B","C","D")
nodelabels("A",10,"B",9,"C",8,"D",7)
axisPhylo()
plot(bdTree, cex=0.5, main="Phylogenetic Tree of beta-defensins")
nodelabels()
d <- dist.alignment(bdAln2, "identity")
as.matrix(d)[2:6, "Human BAC56888.1 b-defensin1 [Homo sapiens]", drop=FALSE]
bdTree <- nj(d)  #Neighbor Join
plot(bdTree, main="Phylogenetic Tree of beta-defensins")
plot(bdTree, cex=0.5, main="Phylogenetic Tree of beta-defensins")
plot(bdTree, cex=0.5, main="Phylogenetic Tree of beta-defensins")
nodelabels()
plot(bdTree, cex=0.5, main="Phylogenetic Tree of beta-defensins")
nodelabels("A",10)
nodelabels("B",9)
nodelabels("C",8)
nodelabels("D",7)
newbdTree <- bdTree
newtips <- word(bdTree$tip.label, 1) #users stringr to pull 1st word in title
newbdTree$tip.label <- newtips
plot(newbdTree, main="Phylogenetic Tree of beta-defensins")
plot(newbdTree, type = "cladogram", main="Phylogenetic Tree of beta-defensins")
plot(newbdTree, main="Phylogenetic Tree of beta-defensins",
edge.color='gold',
tip.color="blue")
set.seed(1001)
z=rcoal(10) #randomly coaslesce tree
z
names(z)
z$tip.label
ss <- z$tip.label[c(1,3,5,7)]
plot(z)
plot(bdTree, cex=0.5, main="Phylogenetic Tree of beta-defensins",nodelabels())
plot(bdTree, cex=0.5, main="Phylogenetic Tree of beta-defensins")
nodelabels()
plot(bdTree, cex=0.5, main="Phylogenetic Tree of beta-defensins")
nodelabels("A",10)
nodelabels("B",9)
nodelabels("C",8)
nodelabels("D",7)
newbdTree <- bdTree
newtips <- word(bdTree$tip.label, 1) #users stringr to pull 1st word in title
newbdTree$tip.label <- newtips
tree <- read.tree(text = "(((A,B),(C,D)),E);")
plot(tree, type = "cladogram", direction'"upwards", edge.width = 2)
tree$tip.label
tree <- read.tree(text = "(((A,B),(C,D)),E);")
plot(tree, type = "cladogram", direction="upwards", edge.width = 2)
tree$tip.label
plot(newbdTree, type = "cladogram", main="Phylogenetic Tree of beta-defensins",length.line = 4, space = 28, gap = 3)
??plot
layout(mat= matrix(1:1,1,1,byrow=TRUE))
# get tree
data("hivtree.newick") # example tree in NH format
tree.hiv <- read.tree(text = hivtree.newick) # load tree
#### classic skyline plot
skylineplot(tree.hiv) # shortcut
#### plot classic and generalized skyline plots and estimate epsilon
sk.opt <- skylineplot.deluxe(tree.hiv)
sk.opt$epsilon
#### classic and generalized skyline plot ####
sk1 <- skyline(tree.hiv)
sk2 <- skyline(tree.hiv, 0.0119)
# use years rather than substitutions as unit for the time axis
plot(sk1, show.years=TRUE, subst.rate=0.0023, present.year = 1997, col=c(grey(.8),1))
lines(sk2,  show.years=TRUE, subst.rate=0.0023, present.year = 1997)
legend(.15,500, c("classic", "generalized"), col=c(grey(.8),1),lty=1)
#### various skyline plots for different epsilons
layout(mat= matrix(1:6,2,3,byrow=TRUE))
ci <- coalescent.intervals(tree.hiv)
plot(skyline(ci, 0.0));title(main="0.0")
plot(skyline(ci, 0.007));title(main="0.007")
plot(skyline(ci, 0.0119),col=4);title(main="0.0119")
plot(skyline(ci, 0.02));title(main="0.02")
plot(skyline(ci, 0.05));title(main="0.05")
plot(skyline(ci, 0.1));title(main="0.1")
layout(mat= matrix(1:1,1,1,byrow=TRUE))
data(bird.orders)plot(compute.brlen(bird.orders, 1))plot(compute.brlen(bird.orders, runif, min = 0, max = 5))layout(matrix(1:4, 2, 2))plot(compute.brlen(bird.orders, power=1), main=expression(rho==1))plot(compute.brlen(bird.orders, power=3), main=expression(rho==3))plot(compute.brlen(bird.orders, power=0.5), main=expression(rho==0.5))plot(compute.brlen(bird.orders, power=0.1), main=expression(rho==0.1))layout(1)
plot(mytree, edge.width = 2)
mytree <- read.tree('mytree.tre')
mytree <- read.tree('mytree.tre')
mytree <- read.tree('mytree.tre')
mytree <- read.tree('mytree.tre')
# or, create simple example tree
mytree <- read.tree(text='((A:3.7,B:3.7):4.5,C:8.2);')
plot(mytree, edge.width = 2)
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 6, height = 4)
dev.off()
# or, create simple example tree
mytree <- read.tree(text='((A:3.7,B:3.7):4.5,C:8.2);')
plot(mytree, edge.width = 2)
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 12, height = 4)
dev.off()
# or, create simple example tree
mytree <- read.tree(text='((A:3.7,B:3.7):4.5,C:8.2);')
plot(mytree, edge.width = 2)
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 6, height = 12)
dev.off()
# or, create simple example tree
mytree <- read.tree(text='((A:3.7,B:3.7):4.5,C:8.2);')
plot(mytree, direction="downward",edge.width = 2)
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 6, height = 12)
dev.off()
# or, create simple example tree
mytree <- read.tree(text='((A:3.7,B:3.7):4.5,C:8.2);')
plot(mytree, direction="downward",edge.width = 5)
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 6, height = 12)
dev.off()
nodelabels
nodelabels()
# or, create simple example tree
mytree <- read.tree(text='((A:3.7,B:3.7):4.5,C:8.2);')
plot(mytree, direction="downward",edge.width = 5)
nodelabels()
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 6, height = 12)
dev.off()
# or, create simple example tree
mytree <- read.tree(text='((A:3.5,B:3.7):4.5,C:8.2);')
plot(mytree, direction="downward",edge.width = 5)
nodelabels()
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 6, height = 12)
dev.off()
# or, create simple example tree
mytree <- read.tree(text='((A:3.1,B:3.7):4.5,C:8.2);')
plot(mytree, direction="downward",edge.width = 5)
nodelabels()
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 6, height = 12)
dev.off()
# or, create simple example tree
mytree <- read.tree(text='((A:6.9,B:3.7):4.5,C:8.2);')
plot(mytree, direction="downward",edge.width = 5)
nodelabels()
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 6, height = 12)
dev.off()
add.scale.bar() # add tree distance scale bar
# or, create simple example tree
mytree <- read.tree(text='((A:6.9,B:3.7):4.5,C:8.2);')
plot(mytree, direction="downward",edge.width = 5)
nodelabels()
add.scale.bar() # add tree distance scale bar
# save figure to file myfigure.pdf
dev.copy(pdf, 'myfigure.pdf', width = 6, height = 12)
dev.off()
clades = mytree$node.label
clades[clades != ""]
knitr::opts_chunk$set(echo = TRUE)
library(msa)
library(seqinr)
library(ape)
system.file("tex", "texshade.sty", package="msa")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
setwd("~/Ramapo/AdvBioinformatics/R/R4Genomics/msa/Petase")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petAlign <- msa(petSeqs)
petAlignClustalWAlign <- msa(petSeqs, "ClustalW")
petAlignClustalOmegaAlign <- msa(petSeqs, "ClustalOmega")
print(petAlign, show="complete")
msaPrettyPrint(petAlign, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petSeqs <- readAAStringSet("PETaseSequences.fasta", format="fasta")
library(msa)
library(seqinr)
library(ape)
library(Biostrings)
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petSeqs <- readAAStringSet("PETaseSequences.fasta", format="fasta")
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petSeqs <- readAAStringSet("PETaseSequences.fasta", format="fasta")
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
system.file("tex", "texshade.sty", package="msa")
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
petAlign <- msa(petSeqs)
petAlignClustalWAlign <- msa(petSeqs, "ClustalW")
petAlignClustalOmegaAlign <- msa(petSeqs, "ClustalOmega")
msaPrettyPrint(petAlign, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
setwd("~/Ramapo/AdvBioinformatics/R/R4Genomics/msa/Petase")
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
petSeqs <- readAAStringSet("./PETase2.fasta", format="fasta")
petSeqs <- readAAStringSet("./PETase2.fasta", format="fasta")
petSeqs
library(mosaicCore)
library(msa)
library(seqinr)
library(ape)
library(Biostrings)
setwd("~/Ramapo/AdvBioinformatics/R/R4Genomics/msa/Petase")
petAlign <- msa(petSeqs)
petAlignClustalWAlign <- msa(petSeqs, "ClustalW")
petAlignClustalOmegaAlign <- msa(petSeqs, "ClustalOmega")
d <- dist.alignment(petAln2, "identity")
d <- dist.alignment(petAlign, "identity")
plot(peTree, main="Phylogenetic Tree of PETases")
petAln2 <- msaConvert(petAlign, type="seqinr::alignment")
petAln2 <- msaConvert(petAlign, type="seqinr::alignment")
d <- dist.alignment(petAln2, "identity")
as.matrix(d)[2:5, "pdb|6EQD|A Chain A, Poly(ethylene terephthalate) hydrolase", drop=FALSE]
peTree <- nj(d)
plot(peTree, main="Phylogenetic Tree of PETases")
#msaPrettyPrint(petAlign, output="pdf", y=c(158, 239),
msaPrettyPrint(petAlign, output="pdf",
subset=c(1:5), showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE,
file="petAlign3.pdf")
> # GC skew
> ####################
> #http://genskew.csb.univie.ac.at
## to remove all Variables
## rm(list=ls()) # Clean up workspace
##install.packages("ggplots")
library(ggplot2)
> # GC skew
> ####################
> #http://genskew.csb.univie.ac.at
## to remove all Variables
## rm(list=ls()) # Clean up workspace
install.packages("ggplots")
library(ggplot2)
library(stringr)
library(ape)
library(seqinr)
library(Biostrings)
dev.off()
ref <- c("NM_005369")     #Create variable for gene name
bl1  <- read.GenBank(ref)  #default seq read in binary from Genbank uses "ape" package
bl1  <- read.GenBank(ref, as.character=TRUE)  #read in from Genbank uses "ape" package
ds  <- c2s(bl1$NM_005369)  #Convert chars to string use "seqinr" package
bl1  <- read.GenBank(ref)  #default seq read in binary from Genbank uses "ape" package
ds  <- c2s(bl1$NM_005369)  #Convert chars to string use "seqinr" package
dna1 <- DNAString(ds)     #Create Bio String for GC counting
dna1 <- DNAString(ds)     #Create Bio String for GC counting
ds
library(ggplot2)
library(stringr)
library(ape)
library(seqinr)
library(Biostrings)
bl1  <- read.GenBank(ref, as.character=TRUE)  #read in from Genbank uses "ape" package
ds  <- c2s(bl1$NM_005369)  #Convert chars to string use "seqinr" package
ds
dna1_2 <- DNAString(c2s(bl1$NM_005369)) # Combine commands
ds  <- c2s(bl1$NM_005369)  #Convert chars to string use "seqinr" package
dna1_2
ref2 <- c("NM_133197")
#bl1  <- read.GenBank(ref)  #default seq read in binary from Genbank uses "ape" package
bl1  <- read.GenBank(ref, as.character=TRUE)  #read in from Genbank uses "ape" package
bl2  <- read.GenBank(ref2, as.character=TRUE)  #read in from Genbank uses "ape" package
ds  <- c2s(bl1$NM_005369)  #Convert chars to string use "seqinr" package
ds2 <- c2s(bl2$NM_133197)  #Convert chars to string use "seqinr" package
ds
ds2
dna1_2 <- DNAString(c2s(bl1$NM_005369)) # Combine commands
dna1_2
seqnames <- c(names(bl1),names(bl2))
letterFrequencyInSlidingView(dna1, view.width=10,letters="CG")
letterFrequencyInSlidingView(dna1, view.width=10,letters="CG")
letterFrequencyInSlidingView(dna1, view.width=10,letters="CG")
letterFrequencyInSlidingView(dna1, view.width=10,letters="CG")
setwd("~/Ramapo/AdvBioinformatics/R/R4Genomics/msa/Petase")
knitr::opts_chunk$set(echo = TRUE)
library(msa)
library(seqinr)
library(ape)
library(Biostrings)
system.file("tex", "texshade.sty", package="msa")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
setwd("~/Ramapo/Genomics/R/YourMSAalignment")
knitr::opts_chunk$set(echo = TRUE)
## Original Sequences with default (long :) names
##FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs.txt", format="fasta")
## Sequences with FASTA titles edited to shorter format
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
FoxP1Seqs
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
getwd()
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
library(msa)
library(seqinr)
library(ape)
library(Biostrings)
## Original Sequences with default (long :) names
##FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs.txt", format="fasta")
## Sequences with FASTA titles edited to shorter format
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
FoxP1Seqs
## Original Sequences with default (long :) names
##FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs.txt", format="fasta")
## Sequences with FASTA titles edited to shorter format
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
library(msa)
library(seqinr)
library(ape)
library(Biostrings)
library(msa)
## Original Sequences with default (long :) names
##FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs.txt", format="fasta")
## Sequences with FASTA titles edited to shorter format
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
FoxP1Seqs
knitr::opts_chunk$set(echo = TRUE)
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
FoxP1Seqs
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
#petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETase2.fasta", format="fasta")
FoxP1Seqs
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
#petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
setwd("~/Ramapo/Genomics/R/msa_alignments")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
#FoxP1Seqs <- readAAStringSet("seqdata/FoxP1seqs_ann.txt", format="fasta")
#petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETase2.fasta", format="fasta")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETase2.fasta", format="fasta")
petSeqs
library(msa)
library(seqinr)
library(ape)
library(Biostrings)
petAlign <- msa(petSeqs)
#petAlignClustalWAlign <- msa(petSeqs, "ClustalW")
#petAlignClustalOmegaAlign <- msa(petSeqs, "ClustalOmega")
print(petAlign, show="complete")
setwd("~/Ramapo/Research/PlasticDegradingEnzymes/R")
knitr::opts_chunk$set(echo = TRUE)
petSeqs <- readAAStringSet("PETseq_ShortName.fasta", format="fasta")
petSeqs <- readAAStringSet("PETseq_ShortName.fasta", format="fasta")
library(msa)
library(seqinr)
library(ape)
library(Biostrings)
#petSeqs <- readAAStringSet("PETseq_ShortName.fasta", format="fasta")
petSeqs
petSeqs <- readAAStringSet("PETseq_ShortName.fasta", format="fasta")
petSeqs <- readAAStringSet("PETseq_ShortName.fasta", format="fasta")
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETase2.fasta", format="fasta")
petSeqs
petSeqs <- readAAStringSet("PETase_seqs.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETase2.fasta", format="fasta")
petSeqs
petSeqs <- readAAStringSet("PETseqShortName.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETase2.fasta", format="fasta")
petSeqs
petAlign <- msa(petSeqs)
#petAlignClustalWAlign <- msa(petSeqs, "ClustalW")
#petAlignClustalOmegaAlign <- msa(petSeqs, "ClustalOmega")
print(petAlign, show="complete")
msaPrettyPrint(petAlign, output="pdf", showNames="left",
showLogo="top", askForOverwrite=FALSE, verbose=FALSE)
petSeqs <- readAAStringSet("PETseqShortName.fasta", format="fasta")
coolpetSeqs <- readAAStringSet("coolpets.txt", format="fasta")
#petSeqs <- readAAStringSet("./PETaseSequences.fasta", format="fasta")
#petSeqs <- readAAStringSet("./PETase2.fasta", format="fasta")
petSeqs
coolpetSeqs
